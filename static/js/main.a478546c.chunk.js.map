{"version":3,"sources":["components/Table/table.module.css","serviceWorker.js","redux/data-reducer.js","redux/settings-reducer.js","redux/store.js","components/Filter.jsx","components/PreLoader.jsx","components/DatasetMenu.jsx","components/validate/validators.js","components/Table/RowEditor.jsx","components/Table/Row.jsx","components/Table/Table.jsx","components/FullData.jsx","components/Settings.jsx","components/Pagination.jsx","App.js","AppContainer.js","api/api.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","initalState","settings","listColumnsOfTable","name","label","sortMode","sortDirection","itemsPerPage","currentPage","isFetching","datasetType","filter","userCard","isEditorActive","dataCache","tableDataOutput","tableReducer","state","action","type","localState","data","map","record","index","id","firstName","lastName","email","phone","address","streetAddress","city","zip","description","province","indexes","sort","a","b","Number","indexOfRow","findIndex","force","mode","elemA","elemB","stringToFind","toLowerCase","activeFilter","item","String","includes","numberOfPage","user","setupSort","setupFilter","setCurrentPage","switchPreloader","applyDelete","dispatch","deleteRow","applySort","setUserCard","recordData","isSettingsActive","reducers","combineReducers","dataReducer","settingsReducer","form","formReducer","store","createStore","applyMiddleware","thunkMiddleWare","connect","filterQuery","applyFilter","props","useState","draft","setDraft","useEffect","className","value","placeholder","onChange","event","text","target","onKeyPress","key","onClick","PreLoader","DatasetMenu","getDataset","required","RecordEditorForm","handleSubmit","pristine","reset","submitting","invalid","onSubmit","Field","component","validate","disabled","setActiveEditor","compose","ownProps","reduxForm","enableReinitialize","RowEditor","reactKey","colSpan","formData","submit","initialValues","Row","editMode","setEditMode","clickOnRowHandler","noClickHandler","e","stopPropagation","applyUpdate","deleteHandler","tableColumns","tableData","applyInsert","insertRow","updateRow","theadHandler","console","log","dataset","isActiveEditor","addButtonHandler","columnCount","length","useSelector","startItem","endItem","border","cellSpacing","css","table","columnsList","columnNames","column","keyboard_focus_button","tabIndex","data-name","keyboard_focus_button__label","theadBuilder","start","end","numberOfColumns","rows","slice","row","rowsBuilder","FullData","readOnly","Settings","useDispatch","countOfItem","to","itemsCount","itemsOnPage","totalItemsCount","pagesCount","Math","ceil","pagesNumbersArray","i","push","paginationElements","elem","numberWrapper","numberActive","paginationArea","App","path","exact","render","AppContainer","fetch","then","response","json","catch","err","alert","getData","insertTable","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.a478546c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"table_header__2sX1c\",\"table\":\"table_table__uJehN\",\"thead_btn\":\"table_thead_btn__3Qcqy\",\"paginationArea\":\"table_paginationArea__22Pqc\",\"numberWrapper\":\"table_numberWrapper__3PacV\",\"numberActive\":\"table_numberActive__y_O7f\",\"keyboard_focus_button\":\"table_keyboard_focus_button__1y84s\",\"keyboard_focus_button__label\":\"table_keyboard_focus_button__label__1VOaq\",\"ComplexButton_Content\":\"table_ComplexButton_Content__1PgGX\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {getData} from \"../api/api\";\r\n\r\nconst initalState = {\r\n    settings: {\r\n        listColumnsOfTable: [\r\n            {name: 'id', label: 'Id'},\r\n            {name: 'firstName', label: 'Имя'},\r\n            {name: 'lastName', label: 'Фамилия'},\r\n            {name: 'eMail', label: 'Почта'},\r\n            {name: 'telNo', label: 'Телефон'},\r\n        ],\r\n        sortMode: null,\r\n        sortDirection: null,\r\n        itemsPerPage: 20,\r\n        currentPage: 1,\r\n        isFetching: false, //происходит ли загрузка чего либо\r\n        datasetType: null, //Большой или малый набор данных загружен. При запуске - null.\r\n    },\r\n    filter: '',\r\n    userCard: null,\r\n    isEditorActive: false,\r\n\r\n    dataCache: [],\r\n    tableDataOutput: []\r\n};\r\n\r\nconst tableReducer = (state = initalState, action) => {\r\n    switch (action.type) {\r\n        case 'INSERT-TABLE': {\r\n            let localState = {...state};\r\n            localState.settings = {...state.settings};\r\n            localState.settings.datasetType = action.datasetType;\r\n            localState.dataCache = action.data.map((record, index) => {\r\n                return ({\r\n                    index,\r\n                    'id': record.id,\r\n                    'firstName': record.firstName,\r\n                    'lastName': record.lastName,\r\n                    'email': record.email,\r\n                    'phone': record.phone,\r\n                    'streetAddress': (!record.address) ? null : record.address.streetAddress,\r\n                    'city': (!record.address) ? null : record.address.city,\r\n                    'province': (!record.address) ? null : record.address.state, //I think \"state\" is not best name in react+redux app.\r\n                    'zip': (!record.address) ? null : record.address.zip,\r\n                    'description': (!record.description) ? null : record.description,\r\n                })\r\n            });\r\n            //service generate non unique ID's - add 'index' field to resolve this\r\n            //not need address as isolated unit - transform record to flat, single layer form\r\n            return localState;\r\n        }\r\n        case 'INSERT-ROW': {\r\n            let localState = {...state};\r\n            let {\r\n                id, firstName, lastName, email, phone,\r\n                streetAddress, city, province, zip, description\r\n            } = action.record;\r\n\r\n            //search biggest index to add new index\r\n            let indexes = localState.dataCache.map(record => record.index);\r\n            indexes.sort((a, b) => {\r\n                if (a > b) return -1;\r\n                if (a < b) return 1;\r\n                return 0;\r\n            });\r\n            let index = Number(indexes[0]) + 1; //readable variant\r\n\r\n            let record = {\r\n                index, id, firstName, lastName, email, phone,\r\n                description, streetAddress, city, province, zip\r\n            };\r\n            localState.dataCache = [record, ...state.dataCache];\r\n            return localState;\r\n        }\r\n        case 'UPDATE-ROW': {\r\n            let localState = {...state};\r\n            let indexOfRow = localState.dataCache.findIndex(record => (record.index === action.index));\r\n            localState.dataCache[indexOfRow] = action.record;\r\n            return localState;\r\n        }\r\n        case 'DELETE-ROW': {\r\n            let localState = {...state};\r\n            localState.dataCache = state.dataCache.filter(record => {\r\n                return record.index !== action.index;\r\n            });\r\n            return localState;\r\n        }\r\n        case 'SETUP-SORT': {\r\n            let localState = {...state};\r\n            localState.settings = {...state.settings};\r\n            if (action.force) localState.settings.sortDirection = 'asc';\r\n            else {\r\n                if (localState.settings.sortMode === action.mode) {\r\n                    if (localState.settings.sortDirection === 'asc') {\r\n                        localState.settings.sortDirection = 'desc';\r\n                    } else {\r\n                        localState.settings.sortDirection = 'asc';\r\n                    }\r\n                } else localState.settings.sortDirection = 'asc';\r\n            }\r\n            localState.settings.sortMode = action.mode;\r\n            return localState;\r\n        }\r\n        case 'DO-SORT': {\r\n            let localState = {...state};\r\n            localState.settings = {...state.settings};\r\n            localState.dataCache = [...state.dataCache];\r\n            if (localState.settings.sortMode !== null) {\r\n                localState.dataCache.sort((a, b) => {\r\n                    let elemA;\r\n                    let elemB;\r\n                    switch (localState.settings.sortMode) {\r\n                        case 'id':\r\n                            elemA = a.id;\r\n                            elemB = b.id;\r\n                            break\r\n                        case 'firstName':\r\n                            elemA = a.firstName;\r\n                            elemB = b.firstName;\r\n                            break\r\n                        case 'lastName':\r\n                            elemA = a.lastName;\r\n                            elemB = b.lastName;\r\n                            break\r\n                        case 'eMail':\r\n                            elemA = a.email;\r\n                            elemB = b.email;\r\n                            break\r\n                        case 'telNo':\r\n                            elemA = a.phone;\r\n                            elemB = b.phone;\r\n                            break\r\n                        default:\r\n                            elemA = a.id;\r\n                            elemB = b.id;\r\n                            break\r\n                    }\r\n                    if (elemA < elemB) return (localState.settings.sortDirection === 'asc') ? -1 : 1;\r\n                    if (elemA > elemB) return (localState.settings.sortDirection === 'asc') ? 1 : -1;\r\n                    return 0;\r\n                });\r\n            }\r\n            return localState;\r\n        }\r\n        case 'SETUP-FILTER': {\r\n            let localState = {...state};\r\n            localState.settings = {...state.settings};\r\n            localState.filter = '';\r\n            if (action.stringToFind) localState.filter = action.stringToFind.toLowerCase();\r\n            return localState;\r\n        }\r\n        case 'DO-FILTER': {\r\n            let localState = {...state};\r\n            localState.settings = {...state.settings};\r\n            const activeFilter = localState.filter;\r\n            localState.tableDataOutput = state.dataCache.filter((item) => (\r\n                        (String(item.id).toLowerCase().includes(activeFilter)) ||\r\n                        (item.firstName.toLowerCase().includes(activeFilter)) ||\r\n                        (item.lastName.toLowerCase().includes(activeFilter))\r\n                    )\r\n            );\r\n            return localState;\r\n        }\r\n        case 'SETUP-CURRENT-PAGE': {\r\n            let localState = {...state};\r\n            localState.settings = {...state.settings};\r\n            if (!action.numberOfPage) localState.settings.currentPage = 1\r\n            else localState.settings.currentPage = action.numberOfPage;\r\n            return localState;\r\n        }\r\n        case 'SET-USER-CARD': {\r\n            //move to other reducer, I think\r\n            let localState = {...state};\r\n            localState.userCard = action.user;\r\n            return localState;\r\n        }\r\n        case 'PRELOADER-SWITCH': {\r\n            let localState = {...state};\r\n            localState.settings = {...state.settings};\r\n            localState.settings.isFetching = action.mode;\r\n            return localState;\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\nexport default tableReducer;\r\n\r\nexport const insertTable = (data, datasetType) => ({type: 'INSERT-TABLE', data, datasetType});\r\nconst insertRow = (record) => ({type: 'INSERT-ROW', record});\r\nconst updateRow = (index, record) => ({type: 'UPDATE-ROW', index, record});\r\nconst deleteRow = (index) => ({type: 'DELETE-ROW', index});\r\nexport const setupSort = (mode, force) => ({type: 'SETUP-SORT', mode, force});\r\nexport const doSort = () => ({type: 'DO-SORT'});\r\nexport const setupFilter = (stringToFind) => ({type: 'SETUP-FILTER', stringToFind});\r\nexport const doFilter = () => ({type: 'DO-FILTER'});\r\nexport const setCurrentPage = (numberOfPage) => ({type: 'SETUP-CURRENT-PAGE', numberOfPage});\r\nexport const switchPreloader = (mode) => ({type: 'PRELOADER-SWITCH', mode});\r\n\r\nexport const deleteRecord = (index) => ({type: 'DELETE-RECORD', index});\r\n\r\nexport const getDataset = (datasetType) => (dispatch) => {\r\n    dispatch(switchPreloader(true));\r\n    getData(datasetType).then(data => {\r\n        if (data) {\r\n            dispatch(insertTable(data, datasetType));\r\n            dispatch(setupSort('id'));\r\n            dispatch(doSort());\r\n            dispatch(setupFilter(''));\r\n            dispatch(doFilter());\r\n        }\r\n        dispatch(switchPreloader(false));\r\n    })\r\n};\r\n\r\nexport const applyInsert = (record) => (dispatch) => {\r\n    dispatch(insertRow(record));\r\n    dispatch(setupSort(null));\r\n    dispatch(setupFilter(''));\r\n    dispatch(doFilter());\r\n};\r\n\r\nexport const applyUpdate = (index, record) => (dispatch) => {\r\n    dispatch(updateRow(index, record));\r\n    dispatch(setupSort(null));\r\n    //dispatch(setupFilter(''));\r\n    dispatch(doFilter());\r\n};\r\n\r\nexport const applyDelete = (index) => (dispatch) => {\r\n    dispatch(deleteRow(index));\r\n    //dispatch(setupFilter(''));\r\n    dispatch(doFilter());\r\n}\r\n\r\nexport const applyFilter = (stringToFind) => (dispatch) => {\r\n    dispatch(setupSort('id', true));\r\n    dispatch(doSort());\r\n    dispatch(setupFilter(stringToFind));\r\n    dispatch(doFilter());\r\n    dispatch(setCurrentPage(1));\r\n}\r\n\r\nexport const applySort = (mode) => (dispatch) => {\r\n    dispatch(setupSort(mode));\r\n    dispatch(doSort());\r\n    //dispatch(setupFilter(''));\r\n    dispatch(doFilter());\r\n    dispatch(setCurrentPage(1));\r\n}\r\n\r\n\r\nexport const setUserCard = (recordData) => ({\r\n    type: 'SET-USER-CARD',\r\n    user: recordData\r\n});\r\n","const initalState = {\r\n        isSettingsActive: false,\r\n        itemsPerPage: 20,\r\n};\r\n\r\nconst tableReducer = (state = initalState, action) => {\r\n    switch (action.type) {\r\n        case 'SET-ITEMS-PER-PAGE': {\r\n            return {...state, itemsPerPage: action.itemsPerPage};\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\nexport default tableReducer;\r\n\r\nexport const setItemsPerPage = (itemsPerPage) => ({type: 'SET-ITEMS-PER-PAGE', itemsPerPage});\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleWare from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\nimport dataReducer from \"./data-reducer\";\r\nimport settingsReducer from \"./settings-reducer\";\r\n\r\nconst reducers = combineReducers({\r\n    data: dataReducer,\r\n    settings: settingsReducer,\r\n    form: formReducer\r\n});\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleWare));\r\n\r\nexport default store;\r\nwindow.store = store;","import React, {useEffect, useState} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {applyFilter} from \"../redux/data-reducer\";\r\n\r\nfunction Filter(props) {\r\n\r\n    const [draft, setDraft] = useState('');\r\n\r\n    useEffect(() => {\r\n        setDraft(props.filterQuery);\r\n    }, [props.filterQuery]);\r\n\r\n    const findHandler = () => {\r\n        props.applyFilter(draft);\r\n    }\r\n    const clearHandler = () => {\r\n        setDraft('');\r\n        props.applyFilter('');\r\n    }\r\n    const updateValue = (event) => {\r\n        const text = event.target.value;\r\n        setDraft(text);\r\n    }\r\n    const keyHandler = (event) => {\r\n        if (event.key === 'Enter') {\r\n            setDraft(event.target.value);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className='filter'>\r\n            <input\r\n                className='filter__input'\r\n                value={draft}\r\n                placeholder={!(draft === '') ? draft : 'Part of firstname or lastname...'}\r\n                onChange={updateValue}\r\n                onKeyPress={keyHandler}\r\n            />\r\n            <div>\r\n                <button className='filter__button' onClick={findHandler}>Filter</button>\r\n                <button className='filter__button' onClick={clearHandler}>Clear</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isFetching: state.data.settings.isFetching,\r\n        filterQuery: state.data.filter,\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, {applyFilter})(Filter);","import React from 'react';\r\n\r\nfunction PreLoader(props) {\r\n\r\n    return (\r\n        <div className='preloader'>\r\n            Loading...\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PreLoader;\r\n","import React from 'react';\r\nimport PreLoader from \"./PreLoader\";\r\n\r\nfunction DatasetMenu(props) {\r\n\r\n    if (props.isFetching) return <PreLoader/>\r\n    else\r\n        return (\r\n            <div className=\"datasetMenu\">\r\n                <button className='datasetMenu__button' onClick={() => {\r\n                    props.getDataset('SMALL')\r\n                }}>Small Dataset\r\n                </button>\r\n                <button className='datasetMenu__button' onClick={() => {\r\n                    props.getDataset('BIG')\r\n                }}>Big Dataset\r\n                </button>\r\n            </div>\r\n\r\n        );\r\n}\r\n\r\nexport default DatasetMenu;\r\n","export const required = value => {\r\n    if (!value) return 'Please fill all fields...';\r\n    return undefined;\r\n}","import React from \"react\";\r\nimport {Field, reduxForm} from 'redux-form';\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {required} from \"../validate/validators\";\r\n\r\nlet RecordEditorForm = props => {\r\n    const {handleSubmit, pristine, reset, submitting, invalid} = props\r\n\r\n    const handleCancel = () => {\r\n        props.setActiveEditor(false);\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div><Field name=\"index\" component='input' type=\"hidden\"/></div>\r\n            <div><Field name=\"id\" placeholder=\"id\" component=\"input\" type=\"text\" validate={[required]}/></div>\r\n            <div><Field name=\"firstName\" placeholder=\"First name\" component=\"input\" type=\"text\" validate={[required]}/>\r\n            </div>\r\n            <div><Field name=\"lastName\" placeholder=\"Last name\" component=\"input\" type=\"text\" validate={[required]}/>\r\n            </div>\r\n            <div><Field name=\"email\" placeholder=\"E-mail\" component=\"input\" type=\"text\" validate={[required]}/></div>\r\n            <div><Field name=\"phone\" placeholder=\"Phone number\" component=\"input\" type=\"text\" validate={[required]}/>\r\n            </div>\r\n            <div><Field name=\"streetAddress\" placeholder=\"Address\" component=\"input\" type=\"text\" validate={[required]}/>\r\n            </div>\r\n            <div><Field name=\"city\" placeholder=\"City\" component=\"input\" type=\"text\" validate={[required]}/></div>\r\n            <div><Field name=\"province\" placeholder=\"State\" component=\"input\" type=\"text\" validate={[required]}/></div>\r\n            <div><Field name=\"zip\" placeholder=\"zip\" component=\"input\" type=\"text\" validate={[required]}/></div>\r\n            <div>\r\n                <Field name=\"description\"\r\n                       placeholder=\"description\"\r\n                       component=\"textarea\"\r\n                       type=\"text\"\r\n                       validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <button type={\"submit\"} disabled={invalid}>Save</button>\r\n                <button type={\"button\"} disabled={pristine || submitting} onClick={reset}>Reset</button>\r\n                <button type={\"button\"} onClick={handleCancel}>Cancel</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    form: 'editor' + ownProps.index,\r\n});\r\n\r\nRecordEditorForm = compose(\r\n    connect(mapStateToProps),\r\n    reduxForm({enableReinitialize: true}),\r\n)(RecordEditorForm);\r\n\r\nlet RowEditor = props => {\r\n\r\n    const handleSubmit = (formData) => {\r\n        if (formData.index) {\r\n            props.submit(formData.index, formData);\r\n        } else {\r\n            props.submit(formData);\r\n        }\r\n        props.setActiveEditor(false);\r\n    }\r\n\r\n    let reactKey = 'addRecord';\r\n    if (props.recordData) reactKey = props.recordData.index;\r\n\r\n    return (\r\n        <tr key={reactKey}>\r\n            <td colSpan={6}>\r\n                <div>\r\n                    <RecordEditorForm setActiveEditor={props.setActiveEditor}\r\n                                      onSubmit={handleSubmit}\r\n                                      initialValues={props.recordData}\r\n                                      index={reactKey}/>\r\n                </div>\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default RowEditor;","import React, {useState} from 'react';\r\nimport RowEditor from \"./RowEditor\";\r\n\r\nfunction Row(props) {\r\n    const {index, id, firstName, lastName, email, phone} = props.recordData;\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    const clickOnRowHandler = () => {\r\n        props.setUserCard(props.recordData)\r\n    }\r\n    const editHandler = () => {\r\n        setEditMode(true);\r\n    }\r\n    const deleteHandler = (index) => {\r\n        props.applyDelete(index)\r\n    }\r\n    const noClickHandler = (e) => {\r\n        e.stopPropagation();\r\n    }\r\n\r\n    const viewer = () => {\r\n        return <tr key={index} onClick={clickOnRowHandler}>\r\n            <td>{id}</td>\r\n            <td>{firstName}</td>\r\n            <td>{lastName}</td>\r\n            <td>{email}</td>\r\n            <td>{phone}</td>\r\n            <td onClick={noClickHandler}>\r\n                <button onClick={() => {\r\n                    editHandler(props.recordData)\r\n                }}>Edit\r\n                </button>\r\n                <button onClick={() => {\r\n                    deleteHandler(index)\r\n                }}>Delete\r\n                </button>\r\n            </td>\r\n        </tr>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!editMode ? viewer() : <RowEditor\r\n                recordData={props.recordData}\r\n                submit={props.applyUpdate}\r\n                setActiveEditor={setEditMode}\r\n            />}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Row;\r\n","import React, {useState} from 'react';\r\nimport {connect, useSelector} from \"react-redux\";\r\nimport css from './table.module.css'\r\nimport {applyDelete, applyInsert, applySort, applyUpdate, setUserCard} from \"../../redux/data-reducer\";\r\nimport Row from \"./Row\";\r\nimport RowEditor from \"./RowEditor\";\r\n\r\nfunction Table(props) {\r\n    const theadHandler = (event) => {\r\n        console.log(event.target);\r\n        console.log(event.target.dataset.name);\r\n        props.applySort(event.target.dataset.name);\r\n    }\r\n    const [isActiveEditor, setActiveEditor] = useState(false);\r\n    const addButtonHandler = () => {\r\n        setActiveEditor(true);\r\n    }\r\n\r\n    const theadBuilder = (columnsList) => {\r\n        const columnNames = columnsList.map((column, index) =>\r\n            <td key={index}>\r\n                <button className={css.keyboard_focus_button} tabIndex=\"0\" name={column.name} data-name={column.name} onClick={theadHandler}>\r\n                    <span className={css.keyboard_focus_button__label} tabIndex=\"-1\" data-name={column.name} >{column.label}\r\n                        {(props.sortMode === column.name) ?\r\n                            ((props.sortDirection === 'asc') ? ' ▲' : ' ▼') :\r\n                            ''\r\n                        }\r\n                    </span>\r\n                </button>\r\n            </td>\r\n        )\r\n\r\n        return <tr>\r\n            {columnNames}\r\n            <td>\r\n                <button onClick={addButtonHandler} disabled={isActiveEditor}>Add</button>\r\n            </td>\r\n        </tr>\r\n    }\r\n\r\n    const editorBuilder = (mode) => {\r\n        if (mode) return <RowEditor setActiveEditor={setActiveEditor} submit={props.applyInsert}/>;\r\n        return null;\r\n    }\r\n\r\n    const columnCount = props.tableColumns.length + 1;\r\n    const itemsPerPage = useSelector(state => state.settings.itemsPerPage); //Check hook using\r\n    const startItem = itemsPerPage * (props.currentPage - 1);\r\n    const endItem = itemsPerPage * props.currentPage;\r\n    const rowsBuilder = (data, start, end, numberOfColumns) => {\r\n        const rows = data.slice(start, end).map(row => <Row key={row.index}\r\n                                                            recordData={row}\r\n                                                            setUserCard={props.setUserCard}\r\n                                                            applyUpdate={props.applyUpdate}\r\n                                                            applyDelete={props.applyDelete}/>);\r\n        return ((data.length > 0) ? rows : <tr>\r\n            <td colSpan={numberOfColumns}>No records</td>\r\n        </tr>);\r\n    }\r\n\r\n    return (\r\n        <div className='container'>\r\n            <table border='1' cellSpacing='0' className={css.table}>\r\n                <thead>\r\n                {theadBuilder(props.tableColumns)}\r\n                </thead>\r\n                <tbody>\r\n                {editorBuilder(isActiveEditor)}\r\n                {rowsBuilder(props.tableData, startItem, endItem, columnCount)}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        tableColumns: state.data.settings.listColumnsOfTable,\r\n        tableData: state.data.tableDataOutput,\r\n        sortMode: state.data.settings.sortMode,\r\n        sortDirection: state.data.settings.sortDirection,\r\n        currentPage: state.data.settings.currentPage,\r\n        isFetching: state.data.settings.isFetching,\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n    applySort,\r\n    setUserCard,\r\n    applyInsert,\r\n    applyUpdate,\r\n    applyDelete\r\n})(Table);","import React from 'react';\r\n\r\nfunction FullData(props) {\r\n    if (props.userCard) {\r\n        if (props.userCard.streetAddress) {\r\n            return (\r\n                <div className='container'>\r\n                    <div className='userFullData'>\r\n                        <div className='userFullData__col1'>\r\n                            <span\r\n                                className='userFullData__label'>Выбран пользователь <strong>{props.userCard.firstName} {props.userCard.lastName}</strong></span>\r\n                            <span\r\n                                className='userFullData__label'>Адрес проживания: <b>{props.userCard.streetAddress}</b></span>\r\n                            <span className='userFullData__label'>Город: <b>{props.userCard.city}</b></span>\r\n                            <span\r\n                                className='userFullData__label'>Провинция/штат: <b>{props.userCard.province}</b></span>\r\n                            <span className='userFullData__label'>Индекс: <b>{props.userCard.zip}</b></span>\r\n                        </div>\r\n                        <div className='userFullData__col2'>\r\n                            <span className='userFullData__label'>Описание:</span>\r\n                            <textarea\r\n                                readOnly\r\n                                className='userFullData__description'\r\n                                value={props.userCard.description}></textarea>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className='container'>\r\n                    <div className='userFullData'>\r\n                        <div className='userFullData__col1'>\r\n                            <span\r\n                                className='userFullData__label'>Выбран пользователь <strong>{props.userCard.firstName} {props.userCard.lastName}</strong></span>\r\n                            <span className='userFullData__label'>No extended data</span>\r\n                        </div>\r\n                    </div>\r\n                </div>)\r\n        }\r\n    } else {\r\n        return <div>Click to row, for more information...</div>\r\n    }\r\n\r\n}\r\n\r\nexport default FullData;","import React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Settings = (props) => {\r\n    const itemsPerPage = useSelector(state => state.settings.itemsPerPage);\r\n    const dispatch = useDispatch();\r\n    const inputHandler = event => {\r\n        dispatch({type: 'SET-ITEMS-PER-PAGE', itemsPerPage: event.target.value})\r\n    }\r\n    const addItem = event => {\r\n        dispatch({type: 'SET-ITEMS-PER-PAGE', itemsPerPage: itemsPerPage + 1})\r\n    }\r\n    const reduceItem = event => {\r\n        let countOfItem = 1;\r\n        if (itemsPerPage > 1) countOfItem = itemsPerPage - 1;\r\n        dispatch({type: 'SET-ITEMS-PER-PAGE', itemsPerPage: countOfItem})\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>Количество элементов на странице</div>\r\n            <div><input name='itemsPerPage' value={itemsPerPage} onChange={inputHandler}/>\r\n                <button onClick={addItem}>+</button>\r\n                <button onClick={reduceItem}>-</button>\r\n            </div>\r\n            <NavLink to={'/'}>Save</NavLink>\r\n        </div>);\r\n}\r\n\r\nexport default Settings","import React, {useEffect} from 'react';\r\nimport css from './Table/table.module.css'\r\nimport {connect, useSelector} from \"react-redux\";\r\nimport {setCurrentPage} from \"../redux/data-reducer\";\r\n\r\nfunction Pagination(props) {\r\n    const itemsOnPage = useSelector(state => state.settings.itemsPerPage);\r\n    const totalItemsCount = props.itemsCount;\r\n    const pagesCount = Math.ceil(totalItemsCount / itemsOnPage);\r\n\r\n    const pagesCountUpdate = () => {\r\n        if (props.currentPage >= pagesCount) props.setCurrentPage(pagesCount);\r\n    }\r\n    useEffect(pagesCountUpdate, [totalItemsCount]);\r\n\r\n    let pagesNumbersArray = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pagesNumbersArray.push(i);\r\n    }\r\n    const paginationElements =  pagesNumbersArray.map((elem, index) =>\r\n        <li key={'pag-'+index} className={(elem === props.currentPage) ? css.numberWrapper + ' ' + css.numberActive : css.numberWrapper}>\r\n            <button className={css.keyboard_focus_button} tabIndex='0' onClick={() =>{props.setCurrentPage(elem)}}>\r\n                <span tabIndex='-1' className={css.keyboard_focus_button__label}>\r\n                    {elem}\r\n                </span>\r\n            </button>\r\n        </li>\r\n    );\r\n\r\n    return (\r\n        <ul className={css.paginationArea}>\r\n            {paginationElements}\r\n        </ul>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        itemsCount: state.data.tableDataOutput.length,\r\n        itemsPerPage: state.data.settings.itemsPerPage,\r\n        currentPage: state.data.settings.currentPage,\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, {setCurrentPage})(Pagination);\r\n","import React from 'react';\r\nimport {NavLink, Route} from \"react-router-dom\";\r\n\r\nimport './App.css';\r\nimport Filter from \"./components/Filter\";\r\nimport DatasetMenu from \"./components/DatasetMenu\";\r\nimport Table from \"./components/Table/Table\";\r\nimport FullData from \"./components/FullData\";\r\nimport Settings from \"./components/Settings\";\r\nimport Pagination from \"./components/Pagination\";\r\n\r\nfunction App(props) {\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <NavLink to={'/settings'} className={'settingsBtn'}>&#9776;</NavLink>\r\n                {(props.datasetType) ? <Filter/> : \"Please select dataset for initialization...\"}\r\n            </header>\r\n            <main className=\"App-main\">\r\n\r\n                <Route path='/' exact render={() => !(props.datasetType)\r\n                    ? <DatasetMenu\r\n                        isFetching={props.isFetching}\r\n                        getDataset={props.getDataset}/>\r\n                    : <Table /> }/>\r\n                <Route path='/' exact render={() => <Pagination/>}/>\r\n                <Route path='/settings' component={Settings}/>\r\n\r\n\r\n            </main>\r\n            <footer className=\"App-footer\">\r\n                {(props.datasetType) ? <FullData userCard={props.userCard}/> : null}\r\n\r\n            </footer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport {connect} from 'react-redux';\r\nimport App from \"./App\";\r\nimport {\r\n    applyDelete,\r\n    applySort,\r\n    getDataset,\r\n    setCurrentPage,\r\n    setUserCard,\r\n} from \"./redux/data-reducer\";\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        tableColumns: state.data.settings.listColumnsOfTable,\r\n        data: state.data.tableDataOutput,\r\n        sortMode: state.data.settings.sortMode,\r\n        sortDirection: state.data.settings.sortDirection,\r\n        datasetType: state.data.settings.datasetType,\r\n        itemsPerPage: state.data.settings.itemsPerPage,\r\n        currentPage: state.data.settings.currentPage,\r\n        isFetching: state.data.settings.isFetching,\r\n        filter: state.data.filter,\r\n        userCard: state.data.userCard,\r\n        isEditorActive: state.data.isEditorActive\r\n    }\r\n};\r\n\r\nconst AppContainer = connect(mapStateToProps,\r\n    {\r\n        getDataset,\r\n        applySort,\r\n        setUserCard,\r\n        setCurrentPage,\r\n        applyDelete\r\n    })(App);\r\n\r\nexport default AppContainer;","export const getData = (mode) => {\r\n//testing\r\n    const dataSetSmall = './data-examples/small.json';\r\n    const dataSetBig = './data-examples/big.json';\r\n    //www.filltext.com have some troubles with certificate. Clients have bugs. Not good, I think.\r\n    //const dataSetSmall = 'https://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}';\r\n    //const dataSetBig = 'https://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}';\r\n\r\n    let path = null;\r\n\r\n    switch (mode) {\r\n        case 'BIG': {\r\n            path = dataSetBig;\r\n            break\r\n        }\r\n        case 'SMALL': {\r\n            path = dataSetSmall;\r\n            break\r\n        }\r\n    }\r\n\r\n    return fetch(path).then(response => response.json()).catch(err => alert(err));\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from \"react-router-dom\";\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from './redux/store'\n\nimport AppContainer from \"./AppContainer\";\n\nReactDOM.render(\n    //<React.StrictMode>\n        <BrowserRouter>\n            <Provider store={store}>\n                <AppContainer/>\n            </Provider>\n        </BrowserRouter>,\n    //</React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}