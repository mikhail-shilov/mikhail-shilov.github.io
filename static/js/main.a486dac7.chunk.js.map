{"version":3,"sources":["serviceWorker.js","redux/data-reducer.js","redux/settings-reducer.js","redux/store.js","components/Filter.jsx","components/PreLoader.jsx","components/DatasetMenu.jsx","components/Table/Pagination.jsx","components/validate/validators.js","components/Table/RowEditor.jsx","components/Table/Row.jsx","components/Table/Table.jsx","components/FullData.jsx","components/Settings.jsx","App.js","AppContainer.js","api/api.js","index.js","components/Table/table.module.css"],"names":["Boolean","window","location","hostname","match","initalState","settings","listColumnsOfTable","name","label","sortMode","sortDirection","itemsPerPage","currentPage","isFetching","datasetType","filter","draft","activeFilter","userCard","isEditorActive","dataCache","tableDataOutput","tableReducer","state","action","type","localState","data","map","record","index","id","firstName","lastName","email","phone","address","streetAddress","city","zip","description","province","recordUpdate","indexOfTarget","findIndex","indexData","sort","a","b","Number","force","mode","elemA","elemB","stringToFind","toLowerCase","item","String","includes","value","numberOfPage","user","editor","inputName","console","log","setupData","setupSort","setupFilter","setCurrentPage","switchPreloader","isSettingsActive","reducers","combineReducers","dataReducer","settingsReducer","form","formReducer","store","createStore","applyMiddleware","thunkMiddleWare","Filter","props","className","filterState","autoFocus","placeholder","onChange","event","text","target","updateDraft","onKeyPress","key","setFilter","onClick","PreLoader","DatasetMenu","getDataset","Pagination","linksArray","itemsOnPage","useSelector","itemsCount","pagesCount","Math","ceil","i","push","useEffect","pagesNumbers","elem","css","numberWrapper","numberActive","paginationArea","required","RecordEditorForm","handleSubmit","pristine","reset","submitting","invalid","onSubmit","Field","component","validate","disabled","setEditMode","compose","connect","ownProps","reduxForm","enableReinitialize","RowEditor","reactKey","recordData","colSpan","formData","updateDataset","initialValues","Row","useState","editMode","clickOnRowHandler","setUserCard","noClickHandler","e","stopPropagation","deleteRecord","deleteHandler","Table","addRecordMode","setAddRecordMode","reSortTable","applySort","rowNames","tableColumns","column","startItem","endItem","tableData","length","rows","slice","row","border","cellSpacing","table","FullData","readOnly","Settings","dispatch","useDispatch","countOfItem","to","App","path","exact","render","switchEditor","insertToDataset","applyDelete","AppContainer","fetch","then","response","json","catch","err","alert","getData","saveRow","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.a486dac7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {getData} from \"../api/api\";\r\n\r\nconst initalState = {\r\n    settings: {\r\n        listColumnsOfTable: [\r\n            {name: 'id', label: 'Id'},\r\n            {name: 'firstName', label: 'Имя'},\r\n            {name: 'lastName', label: 'Фамилия'},\r\n            {name: 'eMail', label: 'Почта'},\r\n            {name: 'telNo', label: 'Телефон'},\r\n        ],\r\n        sortMode: null,\r\n        sortDirection: null,\r\n        itemsPerPage: 20,\r\n        currentPage: 1,\r\n        isFetching: false, //происходит ли загрузка чего либо\r\n        datasetType: null, //Большой или малый набор данных загружен. При запуске - null.\r\n    },\r\n    filter: {\r\n        draft: '',\r\n        activeFilter: '',\r\n    },\r\n    userCard: null,\r\n    isEditorActive: false,\r\n\r\n    dataCache: [],\r\n    tableDataOutput: []\r\n};\r\n\r\nconst tableReducer = (state = initalState, action) => {\r\n    switch (action.type) {\r\n        case 'SETUP-DATASET': {\r\n            let localState = {...state};\r\n            localState.settings = {...state.settings};\r\n            localState.settings.datasetType = action.datasetType;\r\n            localState.dataCache = action.data.map((record, index) => {\r\n                return ({\r\n                    index,\r\n                    'id': record.id,\r\n                    'firstName': record.firstName,\r\n                    'lastName': record.lastName,\r\n                    'email': record.email,\r\n                    'phone': record.phone,\r\n                    'streetAddress': (!record.address)? null: record.address.streetAddress,\r\n                    'city': (!record.address)? null: record.address.city,\r\n                    'province': (!record.address)? null: record.address.state, //I think \"state\" is not best name in react+redux app.\r\n                    'zip': (!record.address)? null: record.address.zip,\r\n                    'description': (!record.description)? null : record.description,\r\n                })\r\n            });\r\n            //service generate non unique ID's - add 'index' field to resolve this\r\n            //not need address as isolated unit - transform record to flat, single level form\r\n            return localState;\r\n        }\r\n        case 'SAVE-ROW': {\r\n            let localState = {...state};\r\n            let {\r\n                index, id, firstName, lastName, email, phone,\r\n                streetAddress, city, province, zip, description\r\n            } = action.record;\r\n\r\n            if (index) {\r\n                let recordUpdate = action.record;\r\n                let indexOfTarget = localState.dataCache.findIndex(record => (record.index === recordUpdate.index));\r\n                localState.dataCache[indexOfTarget] = recordUpdate;\r\n            } else {\r\n                let indexData = localState.dataCache.map(record => record.index);\r\n                indexData.sort((a, b) => {\r\n                    if (a > b) return -1;\r\n                    if (a == b) return 0;\r\n                    if (a < b) return 1;\r\n                });\r\n                index = Number(indexData[0] + 1); //readable variant\r\n                id = id * 1; //short variant\r\n\r\n                let record = {\r\n                    index, id, firstName, lastName, email, phone, description, streetAddress, city, province, zip\r\n                }\r\n                localState.dataCache = [record, ...state.dataCache];\r\n            }\r\n            return localState;\r\n        }\r\n        case 'SETUP-SORT': {\r\n            let localState = {...state};\r\n            localState.settings = {...state.settings};\r\n            if (action.force) localState.settings.sortDirection = 'asc';\r\n            else {\r\n                if (localState.settings.sortMode === action.mode) {\r\n                    if (localState.settings.sortDirection === 'asc')\r\n                        localState.settings.sortDirection = 'desc';\r\n                    else\r\n                        localState.settings.sortDirection = 'asc';\r\n                } else localState.settings.sortDirection = 'asc';\r\n            }\r\n            localState.settings.sortMode = action.mode;\r\n            return localState;\r\n        }\r\n        case 'DO-SORT': {\r\n            let localState = {...state};\r\n            localState.settings = {...state.settings};\r\n            localState.dataCache = [...state.dataCache];\r\n            if (localState.settings.sortMode !== null) {\r\n                localState.dataCache.sort((a, b) => {\r\n                    let elemA;\r\n                    let elemB;\r\n                    switch (localState.settings.sortMode) {\r\n                        case 'id':\r\n                            elemA = a.id;\r\n                            elemB = b.id;\r\n                            break\r\n                        case 'firstName':\r\n                            elemA = a.firstName;\r\n                            elemB = b.firstName;\r\n                            break\r\n                        case 'lastName':\r\n                            elemA = a.lastName;\r\n                            elemB = b.lastName;\r\n                            break\r\n                        case 'eMail':\r\n                            elemA = a.email;\r\n                            elemB = b.email;\r\n                            break\r\n                        case 'telNo':\r\n                            elemA = a.phone;\r\n                            elemB = b.phone;\r\n                            break\r\n                        default:\r\n                            elemA = a.id;\r\n                            elemB = b.id;\r\n                            break\r\n                    }\r\n                    if (elemA < elemB) return (localState.settings.sortDirection === 'asc') ? -1 : 1;\r\n                    if (elemA > elemB) return (localState.settings.sortDirection === 'asc') ? 1 : -1;\r\n                    return 0;\r\n                });\r\n            }\r\n            return localState;\r\n        }\r\n        case 'SETUP-FILTER': {\r\n            let localState = {...state};\r\n            localState.settings = {...state.settings};\r\n            localState.filter.activeFilter = action.stringToFind.toLowerCase();\r\n            localState.filter.draft = '';//move it to local state\r\n            return localState;\r\n        }\r\n        case 'DO-FILTER': {\r\n            let localState = {...state};\r\n            localState.settings = {...state.settings};\r\n            const activeFilter = localState.filter.activeFilter;\r\n            localState.tableDataOutput = state.dataCache.filter((item) => {\r\n                    if (\r\n                        (String(item.id).toLowerCase().includes(activeFilter)) ||\r\n                        (item.firstName.toLowerCase().includes(activeFilter)) ||\r\n                        (item.lastName.toLowerCase().includes(activeFilter))\r\n                    ) return 1;\r\n                    else return 0;\r\n                }\r\n            );\r\n            return localState;\r\n        }\r\n        case 'UPDATE-FILTER-DRAFT': {\r\n            //move functional to local state\r\n            let localState = {...state};\r\n            localState.filter = {...state.filter};\r\n            localState.filter.draft = action.value;\r\n            return localState;\r\n        }\r\n        case 'SETUP-CURRENT-PAGE': {\r\n            let localState = {...state};\r\n            localState.settings = {...state.settings};\r\n            if (!action.numberOfPage) localState.settings.currentPage = 1\r\n            else localState.settings.currentPage = action.numberOfPage;\r\n            return localState;\r\n        }\r\n        case 'SET-USER-CARD': {\r\n            //move to other reducer, I think\r\n            let localState = {...state};\r\n            localState.userCard = action.user;\r\n            return localState;\r\n        }\r\n        case 'PRELOADER-SWITCH': {\r\n            let localState = {...state};\r\n            localState.settings = {...state.settings};\r\n            localState.settings.isFetching = action.mode;\r\n            return localState;\r\n        }\r\n        case 'EDITOR-SWITCH': {\r\n            let localState = {...state};\r\n            localState.isEditorActive = action.mode;\r\n            return localState;\r\n        }\r\n        case 'EDITOR-UPDATE': {\r\n            let localState = {...state};\r\n            localState.editor = {...state.editor};\r\n            localState.editor.user = {...state.editor.user};\r\n            switch (action.inputName) {\r\n                case 'id':\r\n                    localState.editor.user.id = action.value * 1;\r\n                    break\r\n                case 'firstName':\r\n                    localState.editor.user.firstName = action.value;\r\n                    break\r\n                case 'lastName':\r\n                    localState.editor.user.lastName = action.value;\r\n                    break\r\n                case 'email':\r\n                    localState.editor.user.email = action.value;\r\n                    break\r\n                case 'phone':\r\n                    localState.editor.user.phone = action.value;\r\n                    break\r\n                default:\r\n                    console.log('Incorrect inputName...');\r\n                    break\r\n            }\r\n            return localState;\r\n        }\r\n        case 'DELETE-RECORD': {\r\n            //deleted record from loadFromNetwork cache\r\n            let localState = {...state};\r\n            localState.dataCache = state.dataCache.filter(record => {\r\n                if (record.index === action.index) return false\r\n                else return true\r\n            });\r\n            return localState;\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\nexport default tableReducer;\r\n\r\nexport const setupData = (data, datasetType) => ({type: 'SETUP-DATASET', data, datasetType});\r\nexport const saveRow = (record) => ({type: 'SAVE-ROW', record});\r\nexport const setupSort = (mode, force) => ({type: 'SETUP-SORT', mode, force});\r\nexport const doSort = () => ({type: 'DO-SORT'});\r\nexport const setupFilter = (stringToFind) => ({type: 'SETUP-FILTER', stringToFind});\r\nexport const doFilter = () => ({type: 'DO-FILTER'});\r\nexport const setCurrentPage = (numberOfPage) => ({type: 'SETUP-CURRENT-PAGE', numberOfPage});\r\nexport const switchPreloader = (mode) => ({type: 'PRELOADER-SWITCH', mode});\r\nexport const deleteRecord = (index) => ({type: 'DELETE-RECORD', index});\r\n\r\nexport const getDataset = (datasetType) => (dispatch) => {\r\n    dispatch(switchPreloader(true));\r\n    if (datasetType === 'INTERNAL') {\r\n        const data = [\r\n            {id: 1, firstName: \"Рулон\", lastName: \"Обоев\", email: \"rulon@test.io\", phone: \"2342342\"},\r\n            {id: 2, firstName: \"Ушат\", lastName: \"Помоев\", email: \"ushat@test.io\", phone: \"2344672\"},\r\n            {id: 3, firstName: \"Черёд\", lastName: \"Застоев\", email: \"chered@test.io\", phone: \"1354682\"},\r\n            {id: 4, firstName: \"Налёт\", lastName: \"Ковбоев\", email: \"naljot@test.io\", phone: \"4337352\"},\r\n            {id: 5, firstName: \"Набег\", lastName: \"Комрадов\", email: \"nabeg@test.io\", phone: \"7569331\"},\r\n            {id: 6, firstName: \"Кумир\", lastName: \"Дебилов\", email: \"kumir@test.io\", phone: \"554833\"},\r\n            {id: 7, firstName: \"Учёт\", lastName: \"Побоев\", email: \"uchot@test.io\", phone: \"644861\"},\r\n            {id: 8, firstName: \"Поджог\", lastName: \"Сараев\", email: \"podjog@test.io\", phone: \"344866\"}\r\n        ];\r\n        dispatch(setupData(data, datasetType));\r\n        dispatch(setupFilter(''));\r\n        dispatch(doFilter());\r\n        dispatch(setupSort('id'));\r\n        dispatch(doSort());\r\n    } else {\r\n        getData(datasetType).then(data => {\r\n            if (data) {\r\n                dispatch(setupData(data, datasetType));\r\n                dispatch(setupSort('id'));\r\n                dispatch(doSort());\r\n                dispatch(setupFilter(''));\r\n                dispatch(doFilter());\r\n            }\r\n            dispatch(switchPreloader(false));\r\n        })\r\n    }\r\n};\r\n\r\nexport const updateDataset = (record) => (dispatch) => {\r\n    dispatch(saveRow(record));\r\n    dispatch(setupSort(null));\r\n    dispatch(setupFilter(''));\r\n    dispatch(doFilter());\r\n};\r\n\r\nexport const setFilter = (stringToFind) => (dispatch) => {\r\n    dispatch(setupFilter(stringToFind));\r\n    dispatch(doFilter());\r\n    dispatch(setCurrentPage(1));\r\n    dispatch(setupSort('id', true));\r\n    dispatch(doSort());\r\n}\r\nexport const applySort = (mode) => (dispatch) => {\r\n    dispatch(setupSort(mode));\r\n    dispatch(doSort());\r\n    dispatch(setupFilter(''));\r\n    dispatch(doFilter());\r\n    dispatch(setCurrentPage(1));\r\n}\r\n\r\nexport const applyDelete = (index) => (dispatch) => {\r\n    dispatch(deleteRecord(index));\r\n    dispatch(setupFilter(''));\r\n    dispatch(doFilter());\r\n    //dispatch(doSort());\r\n\r\n\r\n}\r\n\r\nexport const updateDraft = (value) => ({type: 'UPDATE-FILTER-DRAFT', value: value});\r\nexport const switchEditor = (mode) => ({type: 'EDITOR-SWITCH', mode});\r\nexport const setUserCard = (recordData) => ({\r\n    type: 'SET-USER-CARD',\r\n    user: recordData\r\n});\r\nexport const updateEditor = (inputName, value) => ({\r\n    type: 'EDITOR-UPDATE',\r\n    inputName: inputName,\r\n    value: value\r\n});\r\n","import {getData} from \"../api/api\";\r\n\r\nconst initalState = {\r\n        isSettingsActive: false,\r\n        itemsPerPage: 20,\r\n};\r\n\r\nconst tableReducer = (state = initalState, action) => {\r\n    switch (action.type) {\r\n        case 'SET-ITEMS-PER-PAGE': {\r\n            return {...state, itemsPerPage: action.itemsPerPage};\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\nexport default tableReducer;\r\n\r\nexport const setItemsPerPage = (itemsPerPage) => ({type: 'SET-ITEMS-PER-PAGE', itemsPerPage});\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleWare from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\nimport dataReducer from \"./data-reducer\";\r\nimport settingsReducer from \"./settings-reducer\";\r\n\r\nconst reducers = combineReducers({\r\n    data: dataReducer,\r\n    settings: settingsReducer,\r\n    form: formReducer\r\n});\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleWare));\r\n\r\nexport default store;\r\nwindow.store = store;","import React from 'react';\r\n\r\nfunction Filter(props) {\r\n    const findHandler = () => {\r\n        props.setFilter(props.filterState.draft);\r\n    }\r\n    const clearHandler = () => {\r\n        props.updateDraft('');\r\n        props.setFilter('');\r\n    }\r\n    const updateValue = (event) => {\r\n        const text = event.target.value;\r\n        props.updateDraft(text);\r\n    }\r\n    const keyHandler = (event) => {\r\n        if (event.key === 'Enter') {\r\n            props.setFilter(event.target.value);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className='filter'>\r\n            <input\r\n                className='filter__input'\r\n                value={props.filterState.draft? props.filterState.draft: props.filterState.activeFilter}\r\n                autoFocus\r\n                placeholder='Part of firstname or lastname...'\r\n                onChange={updateValue}\r\n                onKeyPress={keyHandler}\r\n            />\r\n            <button className='filter__button' onClick={findHandler}>Filter</button>\r\n            <button className='filter__button' onClick={clearHandler}>Clear</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Filter;","import React from 'react';\r\n\r\nfunction PreLoader(props) {\r\n\r\n    return (\r\n        <div className='preloader'>\r\n            Loading...\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PreLoader;\r\n","import React from 'react';\r\nimport PreLoader from \"./PreLoader\";\r\n\r\nfunction DatasetMenu(props) {\r\n\r\n    if (props.isFetching) return <PreLoader/>\r\n    else\r\n        return (\r\n            <div className=\"datasetMenu\">\r\n                <button className='datasetMenu__button' onClick={() => {\r\n                    props.getDataset('INTERNAL')\r\n                }}>Internal Dataset\r\n                </button>\r\n                <button className='datasetMenu__button' onClick={() => {\r\n                    props.getDataset('SMALL')\r\n                }}>Small Dataset\r\n                </button>\r\n                <button className='datasetMenu__button' onClick={() => {\r\n                    props.getDataset('BIG')\r\n                }}>Big Dataset\r\n                </button>\r\n            </div>\r\n\r\n        );\r\n}\r\n\r\nexport default DatasetMenu;\r\n","import React, {useEffect} from 'react';\r\nimport css from './table.module.css'\r\nimport {useSelector} from \"react-redux\";\r\n\r\nfunction Pagination(props) {\r\n\r\n    let linksArray = [];\r\n    //const itemsOnPage = props.itemsOnPage;\r\n    const itemsOnPage = useSelector(state => state.settings.itemsPerPage);\r\n\r\n\r\n    const itemsCount = props.itemsCount;\r\n    const pagesCount = Math.ceil(itemsCount / itemsOnPage);\r\n\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        linksArray.push(i);\r\n    }\r\n\r\n    const pageRange = () => {\r\n        if (props.currentPage >= pagesCount) props.setCurrentPage(pagesCount);\r\n    }\r\n\r\n    useEffect(pageRange, [itemsCount]);\r\n\r\n\r\n    const pagesNumbers =  linksArray.map((elem, index) =>\r\n        <li key={index} className={(elem === props.currentPage) ? css.numberWrapper + ' ' + css.numberActive : css.numberWrapper}>\r\n            <a onClick={() =>{props.setCurrentPage(elem)}}>{elem}</a>\r\n        </li>\r\n    );\r\n\r\n    return (\r\n        <ul className={css.paginationArea}>\r\n            {pagesNumbers}\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default Pagination;\r\n","export const required = value => {\r\n    if (!value) return 'Please fill all fields...';\r\n    return undefined;\r\n}","import React from \"react\";\r\nimport {Field, reduxForm} from 'redux-form';\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {required} from \"../validate/validators\";\r\n\r\nlet RecordEditorForm = props => {\r\n    const { handleSubmit, pristine, reset, submitting, invalid} = props\r\n\r\n    const handleCancel = () => {\r\n        props.setEditMode(false);\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div><Field name=\"index\" component='input' type=\"hidden\"/></div>\r\n            <div><Field name=\"id\" placeholder=\"id\" component=\"input\" type=\"text\" validate={[required]}/></div>\r\n            <div><Field name=\"firstName\" placeholder=\"First name\" component=\"input\" type=\"text\" validate={[required]}/></div>\r\n            <div><Field name=\"lastName\" placeholder=\"Last name\" component=\"input\" type=\"text\" validate={[required]}/></div>\r\n            <div><Field name=\"email\" placeholder=\"E-mail\" component=\"input\" type=\"text\" validate={[required]}/></div>\r\n            <div><Field name=\"phone\" placeholder=\"Phone number\" component=\"input\" type=\"text\" validate={[required]}/></div>\r\n            <div><Field name=\"streetAddress\" placeholder=\"Address\" component=\"input\" type=\"text\" validate={[required]}/></div>\r\n            <div><Field name=\"city\" placeholder=\"City\" component=\"input\" type=\"text\" validate={[required]}/></div>\r\n            <div><Field name=\"province\" placeholder=\"State\" component=\"input\" type=\"text\" validate={[required]}/></div>\r\n            <div><Field name=\"zip\" placeholder=\"zip\" component=\"input\" type=\"text\" validate={[required]}/></div>\r\n            <div><Field name=\"description\" placeholder=\"description\" component=\"textarea\" type=\"text\" validate={[required]}/></div>\r\n            <div>\r\n                <button type={\"submit\"} disabled={invalid}>Save</button>\r\n                <button type={\"button\"} disabled={pristine || submitting} onClick={reset}>Reset</button>\r\n                <button type={\"button\"} onClick={handleCancel}>Cancel</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    form: 'editor'+ownProps.index,\r\n});\r\n\r\nRecordEditorForm = compose(\r\n    connect(mapStateToProps),\r\n    reduxForm({ enableReinitialize: true }),\r\n)(RecordEditorForm);\r\n\r\n//RecordEditorForm = reduxForm({form: 'RowEditor', enableReinitialize: true })(RecordEditorForm);\r\n\r\nlet RowEditor = props => {\r\n    const handleSubmit = (formData) => {\r\n        props.updateDataset(formData);\r\n        console.log(formData);\r\n        props.setEditMode(false);\r\n    }\r\n\r\n    let reactKey = 'addRecord';\r\n    if (props.recordData) reactKey = props.recordData.index;\r\n\r\n    return (\r\n        <tr key={reactKey}>\r\n            <td colSpan={6}>\r\n                <div>\r\n                    <RecordEditorForm setEditMode={props.setEditMode}\r\n                                      onSubmit={handleSubmit}\r\n                                      initialValues={props.recordData}\r\n                                      index={reactKey}\r\n                    />\r\n                </div>\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default RowEditor;","import React, {useState} from 'react';\r\nimport RowEditor from \"./RowEditor\";\r\n\r\nfunction Row(props) {\r\n    const {index, id, firstName, lastName, email, phone} = props.recordData;\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    const clickOnRowHandler = () => {\r\n        props.setUserCard(props.recordData)\r\n    }\r\n    const editHandler = () => {\r\n        setEditMode(true);\r\n    }\r\n    const deleteHandler = (index) => {\r\n        props.deleteRecord(index)\r\n    }\r\n    const noClickHandler = (e) => {\r\n        e.stopPropagation();\r\n    }\r\n\r\n    const viewer = () => {\r\n        return <tr key={index} onClick={clickOnRowHandler}>\r\n            <td>{id}</td>\r\n            <td>{firstName}</td>\r\n            <td>{lastName}</td>\r\n            <td>{email}</td>\r\n            <td>{phone}</td>\r\n            <td onClick={noClickHandler}>\r\n                <button onClick={() => {\r\n                    editHandler(props.recordData)\r\n                }}>Edit\r\n                </button>\r\n                <button onClick={() => {\r\n                    deleteHandler(index)\r\n                }}>Delete\r\n                </button>\r\n            </td>\r\n        </tr>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!editMode ? viewer() : <RowEditor\r\n                recordData={props.recordData}\r\n                updateDataset={props.updateDataset}\r\n                setEditMode={setEditMode}\r\n            />}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Row;\r\n","import React, {useState} from 'react';\r\nimport Pagination from \"./Pagination\";\r\nimport css from './table.module.css'\r\nimport Row from \"./Row\";\r\nimport {useSelector} from \"react-redux\";\r\nimport RowEditor from \"./RowEditor\";\r\n\r\nfunction Table(props) {\r\n    //Read global setting item per page\r\n    const itemsPerPage = useSelector(state => state.settings.itemsPerPage);\r\n\r\n    const [addRecordMode, setAddRecordMode] = useState(false);\r\n    const addHandler = () => {\r\n        setAddRecordMode(true);\r\n    }\r\n\r\n    const reSortTable = (event) => {\r\n        let mode = event.target.name;\r\n        props.applySort(mode);\r\n    }\r\n\r\n    const rowNames = props.tableColumns.map(\r\n        (column, index) =>\r\n            <td key={index}>\r\n                <a name={column.name} onClick={reSortTable}>\r\n                    {column.label}\r\n                    {(props.sortMode === column.name) ? (props.sortDirection === 'asc') ? ' ▲' : ' ▼' : ''}\r\n                </a>\r\n            </td>\r\n    )\r\n\r\n    const addRecord = () => {\r\n        return <RowEditor setEditMode={setAddRecordMode} updateDataset={props.updateDataset}/>\r\n    }\r\n\r\n    const startItem = itemsPerPage * (props.currentPage - 1);\r\n    const endItem = itemsPerPage * props.currentPage;\r\n    const itemsCount = props.tableData.length;\r\n\r\n    let rows = props.tableData.slice(startItem, endItem).map(\r\n        row =>\r\n            <Row\r\n                key={row.index}\r\n                recordData={row}\r\n                setUserCard={props.setUserCard}\r\n                updateDataset={props.updateDataset}\r\n                deleteRecord={props.deleteRecord}\r\n            />\r\n    );\r\n\r\n\r\n    return (\r\n\r\n        <div className='container'>\r\n            <table border='1' cellSpacing='0' className={css.table}>\r\n                <thead>\r\n                <tr>\r\n                    {rowNames}\r\n                    <td>\r\n                        <button onClick={addHandler} disabled={addRecordMode}>Add</button>\r\n                    </td>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {addRecordMode ? addRecord() : null}\r\n                {(rows.length > 0) ? rows : <td colSpan={rowNames.length + 1}>No records</td>}\r\n                </tbody>\r\n            </table>\r\n            <Pagination\r\n                currentPage={props.currentPage}\r\n                itemsOnPage={props.itemsPerPage}\r\n                itemsCount={itemsCount}\r\n                setCurrentPage={props.setCurrentPage}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Table;\r\n","import React from 'react';\r\n\r\nfunction FullData(props) {\r\n    if (props.userCard) {\r\n        if (props.userCard.streetAddress) {\r\n            return (\r\n                <div className='container'>\r\n                    <div className='userFullData'>\r\n                        <div className='userFullData__col1'>\r\n                            <span\r\n                                className='userFullData__label'>Выбран пользователь <strong>{props.userCard.firstName} {props.userCard.lastName}</strong></span>\r\n                            <span\r\n                                className='userFullData__label'>Адрес проживания: <b>{props.userCard.streetAddress}</b></span>\r\n                            <span className='userFullData__label'>Город: <b>{props.userCard.city}</b></span>\r\n                            <span className='userFullData__label'>Провинция/штат: <b>{props.userCard.province}</b></span>\r\n                            <span className='userFullData__label'>Индекс: <b>{props.userCard.zip}</b></span>\r\n                        </div>\r\n                        <div className='userFullData__col2'>\r\n                            <span className='userFullData__label'>Описание: <textarea\r\n                                readOnly\r\n                                className='userFullData__description'\r\n                                value={props.userCard.description}></textarea></span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className='container'>\r\n                    <div className='userFullData'>\r\n                        <div className='userFullData__col1'>\r\n                            <span\r\n                                className='userFullData__label'>Выбран пользователь <strong>{props.userCard.firstName} {props.userCard.lastName}</strong></span>\r\n                            <span className='userFullData__label'>No extended data</span>\r\n                        </div>\r\n                    </div>\r\n                </div>)\r\n        }\r\n    } else {\r\n        return <div>Click to row, for more information...</div>\r\n    }\r\n\r\n}\r\n\r\nexport default FullData;","import React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Settings = (props) => {\r\n    const itemsPerPage = useSelector(state => state.settings.itemsPerPage);\r\n    const dispatch = useDispatch();\r\n    const inputHandler = event => {\r\n        dispatch({type: 'SET-ITEMS-PER-PAGE', itemsPerPage: event.target.value})\r\n    }\r\n    const addItem = event => {\r\n        dispatch({type: 'SET-ITEMS-PER-PAGE', itemsPerPage: itemsPerPage + 1})\r\n    }\r\n    const reduceItem = event => {\r\n        let countOfItem = 1;\r\n        if (itemsPerPage > 1) countOfItem = itemsPerPage - 1;\r\n        dispatch({type: 'SET-ITEMS-PER-PAGE', itemsPerPage: countOfItem})\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>Количество элементов на странице</div>\r\n            <div><input name='itemsPerPage' value={itemsPerPage} onChange={inputHandler}/>\r\n                <button onClick={addItem}>+</button>\r\n                <button onClick={reduceItem}>-</button>\r\n            </div>\r\n            <NavLink to={'/'}>Save</NavLink>\r\n\r\n\r\n        </div>);\r\n}\r\n\r\nexport default Settings","import React from 'react';\r\nimport {NavLink, Route} from \"react-router-dom\";\r\n\r\nimport './App.css';\r\nimport Filter from \"./components/Filter\";\r\nimport DatasetMenu from \"./components/DatasetMenu\";\r\nimport Table from \"./components/Table/Table\";\r\nimport FullData from \"./components/FullData\";\r\nimport Settings from \"./components/Settings\";\r\n\r\nfunction App(props) {\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <NavLink to={'/settings'} className={'settingsBtn'}>&#9776;</NavLink>\r\n                {(props.datasetType)\r\n                    ? <Filter\r\n                        filterState={props.filter}\r\n                        updateDraft={props.updateDraft}\r\n                        setFilter={props.setFilter}\r\n                    /> : \"Please select dataset for initialization...\"}\r\n            </header>\r\n            <main className=\"App-main\">\r\n\r\n                <Route path='/' exact render={() => !(props.datasetType)\r\n                    ? <DatasetMenu\r\n                        isFetching={props.isFetching}\r\n                        getDataset={props.getDataset}/>\r\n                    : <Table\r\n                        tableColumns={props.tableColumns}\r\n                        sortMode={props.sortMode}\r\n                        sortDirection={props.sortDirection}\r\n                        currentPage={props.currentPage}\r\n                        tableData={props.data}\r\n                        applySort={props.applySort}\r\n                        setCurrentPage={props.setCurrentPage}\r\n                        setUserCard={props.setUserCard}\r\n                        isEditorActive={props.isEditorActive}\r\n                        switchEditor={props.switchEditor}\r\n                        insertToDataset={props.insertToDataset}\r\n                        updateDataset={props.updateDataset}\r\n                        deleteRecord={props.applyDelete}\r\n                    />}/>\r\n                <Route path='/settings' component={Settings}/>\r\n\r\n\r\n\r\n\r\n            </main>\r\n            <footer className=\"App-footer\">\r\n                {(props.datasetType) ? <FullData userCard={props.userCard}/> : null}\r\n\r\n            </footer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport {connect} from 'react-redux';\r\nimport App from \"./App\";\r\nimport {\r\n    applyDelete,\r\n    applySort,\r\n    getDataset,\r\n    insertToDataset,\r\n    setCurrentPage,\r\n    setFilter,\r\n    setUserCard,\r\n    switchEditor, updateDataset,\r\n    updateDraft\r\n} from \"./redux/data-reducer\";\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        tableColumns: state.data.settings.listColumnsOfTable,\r\n        data: state.data.tableDataOutput,\r\n        sortMode: state.data.settings.sortMode,\r\n        sortDirection: state.data.settings.sortDirection,\r\n        datasetType: state.data.settings.datasetType,\r\n        itemsPerPage: state.data.settings.itemsPerPage,\r\n        currentPage: state.data.settings.currentPage,\r\n        isFetching: state.data.settings.isFetching,\r\n        filter: state.data.filter,\r\n        userCard: state.data.userCard,\r\n        isEditorActive: state.data.isEditorActive\r\n    }\r\n};\r\n\r\nconst AppContainer = connect(mapStateToProps,\r\n    {\r\n        getDataset,\r\n        setFilter,\r\n        applySort,\r\n        updateDraft,\r\n        setUserCard,\r\n        setCurrentPage,\r\n        switchEditor,\r\n        updateDataset,\r\n        applyDelete\r\n    })(App);\r\n\r\nexport default AppContainer;","export const getData = (mode) => {\r\n\r\n    const dataSetSmall = 'https://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}';\r\n    const dataSetBig = 'https://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}';\r\n\r\n    let path = null;\r\n\r\n    switch (mode) {\r\n        case 'BIG': {\r\n            path = dataSetBig;\r\n            break\r\n        }\r\n        case 'SMALL': {\r\n            path = dataSetSmall;\r\n            break\r\n        }\r\n    }\r\n\r\n    return fetch(path).then(response => response.json()).catch(err => alert(err));\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from \"react-router-dom\";\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from './redux/store'\n\nimport AppContainer from \"./AppContainer\";\n\nReactDOM.render(<React.StrictMode>\n        <BrowserRouter>\n            <Provider store={store}>\n                <AppContainer/>\n            </Provider>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"table_header__2sX1c\",\"table\":\"table_table__uJehN\",\"paginationArea\":\"table_paginationArea__22Pqc\",\"numberWrapper\":\"table_numberWrapper__3PacV\",\"numberActive\":\"table_numberActive__y_O7f\"};"],"sourceRoot":""}